from typing_extensions import TypedDict

Solution = list[int] | list[float] | list[list[int | float]]


class SolutionRequest(TypedDict):
    """
    Request structure for submitting a CAPTCHA solution to the server.

    Defines the expected request body for the `/api/solution` endpoint when a user
    submits a CAPTCHA solution. The solution can comprise integers, floats, or tuples
    containing an integer and a float.

    Attributes
    ----------
    solution : Solution
        The proposed CAPTCHA solution generated by the user's interactions.
    """

    solution: Solution


class SolutionCodeRequest(TypedDict):
    """
    Request structure for submitting a CAPTCHA solution to the server.

    Defines the expected request body for the `/api/solution_code` endpoint when a user
    submits a CAPTCHA solution. The solution code is a string.

    Attributes
    ----------
    solution_code : str
        The code the user provides after solving the CAPTCHA.
    """

    solution_code: str


class SolutionResponse(TypedDict):
    """
    Response structure when submitting a CAPTCHA solution to the server.

    Defines the expected response body from the `/api/solution` endpoint after a
    user submits a CAPTCHA solution. The server responds with a boolean indicating
    whether the proposed solution is correct or not.

    Attributes
    ----------
    solved : bool
        Indicates whether the submitted CAPTCHA solution is correct (`True`) or not (`False`).
    """

    solved: bool


class SolutionCodeResponse(TypedDict):
    """
    Response structure when submitting a CAPTCHA solution to the server.

    Defines the expected response body from the `/api/solution_code` endpoint after a
    user submits the CAPTCHA code. The server responds with a boolean indicating
    whether the proposed code is accepted or not.

    Attributes
    ----------
    accepted : bool
        Indicates whether the provided code was accepted.
    """

    accepted: bool
